#pragma config(Sensor, in1,    theta,          sensorGyro)
#pragma config(Sensor, dgtl1,  flyEnc,         sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  lDriveEnc,      sensorQuadEncoder)
#pragma config(Sensor, dgtl5,  rDriveEnc,      sensorQuadEncoder)
#pragma config(Motor,  port1,           roller,        tmotorVex393TurboSpeed_HBridge, openLoop)
#pragma config(Motor,  port2,           lDrive,        tmotorVex393TurboSpeed_MC29, openLoop)
#pragma config(Motor,  port3,           lFly1,         tmotorVex393TurboSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port4,           lFly2,         tmotorVex393TurboSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port5,           lFly3,         tmotorVex393TurboSpeed_MC29, openLoop)
#pragma config(Motor,  port6,           rFly1,         tmotorVex393TurboSpeed_MC29, openLoop)
#pragma config(Motor,  port7,           rFly2,         tmotorVex393TurboSpeed_MC29, openLoop)
#pragma config(Motor,  port8,           rFly3,         tmotorVex393TurboSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port9,           rDrive,        tmotorVex393TurboSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port10,          lift,          tmotorVex393TurboSpeed_HBridge, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#define RX vexRT[Ch1]
#define RY vexRT[Ch2]
#define LY vexRT[Ch3]
#define LX vexRT[Ch4]

#define up5 vexRT[Btn5U]
#define up6 vexRT[Btn6U]

void setLDrive(int pwr) {
	motor[lDrive] = pwr;
}

void setRDrive(int pwr) {
	motor[rDrive] = pwr;
}

int arcL(int x, int y) {
	return y + x;
}

int arcR(int x, int y) {
	return y - x;
}

task main() {
	float angleNoise = 18,
	angle = 0,
	thetaLast = 0,
	posX = 0,
	posY = 0;
	int lEnc,
		rEnc,
		encAvg,
		encAvgLast = 0,
		time,
		timeLast = 0;

	while(true) {
		time = nPgmTime;
		if(fabs((SensorValue[theta] - thetaLast) / (time - timeLast)) > angleNoise)
			angle += SensorValue[theta];
		lEnc = SensorValue[lDriveEnc];
		rEnc = SensorValue[rDriveEnc];
		encAvg = (lEnc + rEnc) / 2;
		posX += (encAvg - encAvgLast) * cosDegrees(angle / 10);
		posY += (encAvg - encAvgLast) * sinDegrees(angle / 10);

encAvgLast = encAvg;
timeLast = time;

		setRDrive(arcR(RX, LY));
		setLDrive(arcL(RX, LY));
	}
}
